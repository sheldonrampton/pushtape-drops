<?php
/**
 * @file
 * Pushtape core.
 * UI, FormAPI, and other general improvements to Pushtape Features.
 */

/**
 * Implements hook_init().
 */
function pushtape_ui_init() {

}

/**
 * Implements hook_form_alter().
 */
function pushtape_ui_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'page_node_form':
      // automatically make menu link
      // disabling this, not sure if it makes sense at the moment.
      //$form['menu']['enabled']['#default_value'] = 1;
      break;
    case 'track_node_form':
      $node = $form['#node'];
      /**
       * Album fields
       *
       * $form['field_album_checkbox'] - General UI field to force empty value, not stored
       * $form['field_album'] - main entity reference field that stores the album id
       * $form['field_new_album'] - field used to create a new album node, not stored
       * $form['field_album_previous_value'] - hidden field used in _submit handler, not stored
       *
       * $form['field_artwork_checkbox'] - General UI toggle, not stored
       *
       * See pushtape.js for client side manipulation of these elements
       */
      
      // Add a little UI checkbox for the artwork.
      $form['field_artwork_checkbox'] = array(
        '#title' => t('Add track artwork'),
        '#type' => 'checkbox',
        '#default_value' => !empty($node->field_artwork),
        '#description' => t('(If no track artwork is present, album artwork will be used.)'),
        '#weight' => $form['field_artwork']['#weight'] - .1, // this weight trick is used to position the checkbox just above the element.
      );
      $form['field_artwork']['#states'] = array('visible' => array(':input[name="field_artwork_checkbox"]' => array('checked' => TRUE)));
      $form['field_artwork']['#prefix'] = '<div class="upload-artwork indent">';
      $form['field_artwork']['#suffix'] = '</div>';
      
      // Add a UI checkbox for the album field
      $form['field_album_checkbox'] = array(
        '#title' => t('Part of an album'),
        '#type' => 'checkbox',
        '#default_value' => !empty($form['field_album'][LANGUAGE_NONE]['#default_value']) && !empty($form['field_album'][LANGUAGE_NONE]['#default_value'][0]),
        '#weight' => $form['field_album']['#weight'] - .1,
        '#suffix' => '<div class="album-wrap indent highlight">',
      );
      // Put the new album option at the bottom.
      unset($form['field_album'][LANGUAGE_NONE]['#options']['_none']);
      $form['field_album'][LANGUAGE_NONE]['#options']['_none'] = t('- New album -');
      $form['field_album']['#states'] = array('visible' => array(':input[name="field_album_checkbox"]' => array('checked' => TRUE)));

      // Create a new form element to enable new album creation
      $form['new_album'] = array(
        '#title' => 'Name',
        '#type' => 'textfield',
        '#prefix' => '<div class="new-album indent">',
        '#suffix' => '</div> <!-- new-album --></div><!-- album-wrap -->',
        '#weight' => $form['field_album']['#weight'] + .1,
        '#size' => 15,
        '#description' => '(You will add more album info in the next step.)',
        '#states' => array(
          'visible' => array(
            ':input[name="field_album_checkbox"]' => array('checked' => TRUE),  
            ':input[name="field_album[und]"]' => array('value' => '_none'),  // TODO: broken!
          )
         ),
      );
      // Store the previous album in a hidden field, so we can compare it later with
      // field_album and see if it has changed
      $form['field_album_previous_value'] = array(
        '#type' => 'hidden',
        '#value' => !empty($form['field_album'][LANGUAGE_NONE]['#default_value']) ? $form['field_album'][LANGUAGE_NONE]['#default_value'][0] : NULL,
      );

      $form['#validate'][] = 'pushtape_ui_track_node_form_validate';
      $form['actions']['submit']['#submit'][] = 'pushtape_ui_track_node_form_submit';
      break;
    case 'album_node_form':
      $form['field_tracklist'][LANGUAGE_NONE]['#theme'] = 'pushtape_ui_field_multiple_value_form';
      $form['actions']['submit']['#submit'][] = 'pushtape_ui_album_node_form_submit';
      break;
    case 'node_type_form':
      // Make inherited fields configurable on track edit page.
      if ($form['#node_type']->type == 'track') {
        $form['pushtape_inherit'] = array(
          '#type' => 'fieldset',
          '#title' => 'Pushtape UI Settings',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#group' => 'additional_settings',             
          );
        $form['pushtape_inherit']['pushtape_inherit_fields'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Select which fields should autoload from album'),
          '#options' => pushtape_ui_shared_fields(),
          '#default_value' => variable_get('pushtape_inherit_fields_track', array('field_artist', 'field_artwork', 'field_release_date')),
          '#description' => 'When a track field is empty, attempt to load the information from the associated album node. ',
        );
      }
      break;
    default:
  }
}

/**
 *  Custom validation handler for track node form.
 */
function pushtape_ui_track_node_form_validate($form, &$form_state) {
  /* We need to force an album here. */
  if ($form['field_album_checkbox']['#value'] == 1 && empty($form_state['values']['new_album']) && !is_numeric($form_state['values']['field_album'][LANGUAGE_NONE][0]['target_id'])) {
    form_set_error('new_album', t('Please enter a name for your new album.'));
  }
  if ($form['field_album_checkbox']['#value'] == 0) {
    $form_state['values']['new_album'] = '';
    $form_state['values']['field_album'][LANGUAGE_NONE][0]['target_id'] = '';
  }
}

/**
 *  Custom submit handler for track node form.
 *  Forces album->track relationship 1-1.
 */
function pushtape_ui_track_node_form_submit($form, &$form_state) {

  // If we are creating a new album...
  if ($form['field_album_checkbox']['#value'] == 1 && !empty($form_state['values']['new_album'])) {
    global $user;
    // Create a new album node
    $node = new stdClass();
    $node->type = 'album';
    node_object_prepare($node);
    $node->title = $form_state['values']['new_album'];
    $node->author = $user->name;
    $node->uid = $user->uid;
    $node->language = LANGUAGE_NONE;
    $node->pathauto_perform_alias = FALSE;
    $node->field_tracklist[LANGUAGE_NONE][0]['target_id'] = $form_state['nid'];
    // This function operates by reference on our node object, and will add $node->nid.
    node_save($node);
    // Now associate the track with the new album and redirect to it after saving the track.
    $track = node_load($form_state['nid']);
    $track->field_album[LANGUAGE_NONE][0]['target_id'] = $node->nid;
    node_save($track);
    unset($form_state['rebuild']);
    $form_state['redirect'] = 'node/' . $node->nid . '/edit';
  }
  elseif ($form_state['values']['field_album_previous_value'] != $form_state['values']['field_album'][LANGUAGE_NONE][0]['target_id']) {
    $track_id = $form_state['nid'];
    // Delete from previous album, if there was one.
    if ($form_state['values']['field_album_previous_value'] > 0) {
      $old_album = node_load($form_state['values']['field_album_previous_value']);
      $filtered = array();
      foreach ($old_album->field_tracklist[LANGUAGE_NONE] as $key => $value) {
        if ($value['target_id'] != $track_id) {
          $filtered[$key]['target_id'] = $value['target_id'];
        }
      }
      $old_album->field_tracklist[LANGUAGE_NONE] = $filtered;
      node_save($old_album);
    }
    // Add to this album
    if ($form['field_album_checkbox']['#value'] == 1) {
      $this_album = node_load($form_state['values']['field_album'][LANGUAGE_NONE][0]['target_id']);
      $delta = !empty($this_album->field_tracklist) ? count($this_album->field_tracklist[LANGUAGE_NONE]) : 0;
      if ($delta > 0) {
        // Avoid duplicates
        $filtered = array();
        $exists = FALSE;
        foreach ($this_album->field_tracklist[LANGUAGE_NONE] as $key => $value) {
          if ($value['target_id'] == $track_id) {
            $exists = TRUE;
          }
        }
        if (!$exists) {
          $this_album->field_tracklist[LANGUAGE_NONE][$delta]['target_id'] = $track_id;
        }
      }
      else {
        $this_album->field_tracklist[LANGUAGE_NONE][$delta]['target_id'] = $track_id;
      }
      node_save($this_album);
    }
  }
}

/**
 * Custom submit handler for track node form.
 */
function pushtape_ui_album_node_form_submit($form, &$form_state) {

}

/**
 * Implements hook_menu().
 */
function pushtape_ui_menu() {
  $items['user/%user/logout'] = array(
    'title' => 'Log out', 
    'access callback' => 'user_is_logged_in', 
    'page callback' => 'pushtape_user_logout_redirect', 
    'weight' => 10, 
    'type' => MENU_LOCAL_TASK,    
  );
  return $items;
}

function pushtape_user_logout_redirect() {
  drupal_goto('user/logout');  
}

function pushtape_user_logout() {
  $_GET['destination'] = 'user';  
}

/**
  * Implements hook_menu_alter()
  * Remember to clear the menu cache after adding/editing this function.
  */
function pushtape_ui_menu_alter(&$items) {
  // Add a delete tab to nodes
  $items['node/%node']['type'] = MENU_CALLBACK;
  unset($items['node/%node/delete']['context']);
}

/**
 * Implements hook_theme()
 */
function pushtape_ui_theme() {
  return array(
    'pushtape_ui_field_multiple_value_form' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Override of theme_field_multiple_value_form() to only allow sorting for multiple reference field.
 * @@TODO: This seems fragile, is there a better way to sort and store track order?
*/
function theme_pushtape_ui_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';
  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? '<span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title: !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        // $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {      
      if ($item['target_id']['#default_value']) {
        $track_id = pushtape_ui_get_related_track_id($item['target_id']);
        $track = node_load($track_id);
        $item['_weight']['#attributes']['class'] = array($order_class);
        $delta_element = drupal_render($item['_weight']);
        $cells = array(
          array(
            'data' => '',
            'class' => array('field-multiple-drag'),
          ),
          $track->title,
          array(
            'data' => $delta_element,
            'class' => array('delta-order'),
          ),
        );
        $rows[] = array(
          'data' => $cells,
          'class' => array('draggable'),
        );
      }
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    // $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';

    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }
  return $output;
}

/**
 * Implements hook_node_view().
 */
function pushtape_ui_preprocess_node(&$vars) {
  // Let's setup some variables to make theming a bit easier.
  $node = $vars['node'];
  if ($node->type == 'track') {
  }
  elseif ($node->type == 'album') {
  }
}

/**
 * Implements hook_node_load().
 */
function pushtape_ui_node_load($nodes, $types) {
  /**
   * If a track leaves certain fields empty, use its album to fill in those
   * fields. Examples: Artwork, Artist, Release Date.
   * @todo Figure out how to do this at the entity/field api level for display.
   * For now a pushtape_ui_override flag will be set to show when this happens
   * for a field.
   */
  foreach ($nodes as $node) {
    if ($node->type == 'track') {
      if (!empty($node->field_album)) {
        // Load Album
        $album = node_load($node->field_album[LANGUAGE_NONE][0]['target_id']);
        // Find shared fields between track and album nodes.
        $shared_fields = array_keys(pushtape_ui_shared_fields());
        // Pull which fields to override from config
        $include =  variable_get('pushtape_inherit_fields_track', array('field_artist', 'field_artwork', 'field_release_date'));
        // When loading a track node, if track field is empty load from associated album node field.
        $pushtape_ui_override = array();
        if ($album) { 
          foreach($shared_fields as $field) {
            if (empty($node->$field) && in_array($field, $include)) {
              $node->$field = $album->$field;
              $pushtape_ui_override[] = $field;
            }            
          }
        }
        // We add an override flag to the node object to signal a field override.
        // Override, Autoload, Inherit - confusing?
        $node->pushtape_ui_override = $pushtape_ui_override;
      }
    }
  }
}

/**
 * Find shared fields between album and track nodes
 */
function pushtape_ui_shared_fields() {
  $fields = array_intersect_key(field_info_instances('node', 'album'), field_info_instances('node', 'track'));
  $shared = array();

  foreach ($fields as $key => $value) {
    $shared[$key] = $value['label'];
  }
  return $shared;
}

/**
 *  Implements hook_node_prepare().
 */
function pushtape_ui_node_prepare($node) {
  // Make sure overridden track fields are empty on the edit form
  if (!empty($node->pushtape_ui_override)) {
    foreach ($node->pushtape_ui_override as $field) {
      $node->$field = '';
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function pushtape_ui_field_formatter_info() {
  return array(
    // the key must be unique, so it's best to prefix with your module's name.
    'pushtape_ui_tracklist_view' => array(
      'label' => t('Pushtape: Tracklist View'),
      'field types' => array('entityreference'),
      'settings' => array('view_name' => 'pushtape_ordered_list'), 
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function pushtape_ui_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  
  // Safe fallback if Views is disabled
  $view_options['pushtape_ordered_list'] = t('Default - Ordered list of linked titles');
      
  // Add all views that are enabled and tagged with 'pushtape' as options
  if (module_exists('views')) {
    $views = views_get_all_views();
    foreach ($views as $name => $view) {
      // Load up all views tagged with "pushtape" as options
      if (!$view->disabled &&  $view->tag == 'pushtape') {
        $view_options[$name] = 'View: ' . $view->human_name . ' (' . $view->name .')';
      }
    }
  }
  
  //Add select box
  $element['view_name'] = array(
    '#type'           => 'select',                           // Use a select box widget
    '#title'          => t('Tracklist view'),                   // Widget label
    '#description'    => t('Select how you would like to display the tracklist view. You can select a custom View for your tracklist here.'), // Helper text
    '#default_value'  => $settings['view_name'],              // Get the value if it's already been set
    '#options'        => $view_options,
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function pushtape_ui_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Tracklist view: "@view"', array(
    '@view'     => $settings['view_name'],
  )); 
  return $summary;
}

/**
 * Implements hook_field_formatter_view()
 */
function pushtape_ui_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'pushtape_ui_tracklist_view':    
      if ($settings['view_name'] != 'pushtape_ordered_list' && module_exists('views')) {
        // Load up a custom view
        $view = views_embed_view($settings['view_name']);
        $element[0]['#markup'] = $view;
      }
      else {
        // Output our default ordered list instead of loading up a view.
        $rows = array();
        foreach ($items as $delta => $item) {
          $node = node_load($item['target_id']);
          $rows[] = l($node->title, 'node/' . $item['target_id']);
        }
        $element[0] = array(
          '#theme' => 'item_list',
          '#items' => $rows,
          '#type' => 'ol',
        );          
      }
      break;
  }
  return $element;
}

/**
 *  Code borrowed from _entityreference_autocomplete_validate
 *  We need to use this because the multiform widget for entity reference
 *  uses the format ENTITY NAME (ENTITY ID)
 *  In our case we need to get the node id from: Track Name (NID)
 *  So we just use the preg match part to get the NID we want, and print the title
 *  in the multiform widget.
 *  TODO: Avoid these kind of workarounds.
 *
 */
function pushtape_ui_get_related_track_id($element) {
  // If a value was entered into the autocomplete...
  $value = '';
  if (!empty($element['#value'])) {
    // Take "label (entity id)', match the id from parenthesis.
    if (preg_match("/.+\((\d+)\)/", $element['#value'], $matches)) {
      $value = $matches[1];
    }
    else {
      // We have an unexpected situation...parenthesis are missing.
    }
  }
  // Update the value of this element so the field can validate the product IDs.
  //form_set_value($element, $value, $form_state);
  return $value;
}

/**
 * Better date defaults
 */
function pushtape_ui_date_formats() {
  return array(
    // January 2, 1980
    array(
      'type' => 'long', 
      'format' => 'F j, Y', 
      'locales' => array(),
    ),
    // Jan 2, 1980
    array(
      'type' => 'medium', 
      'format' => 'M j, Y', 
      'locales' => array(),
    ),
    // 1/2/1980
    array(
      'type' => 'short', 
      'format' => 'n/j/Y', 
      'locales' => array(),
    ),
  );
}